apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: trivy-task
spec:
  params:
    - name: image-url
      description: "The location of image to scan a Registry <server>/<namespace>/<repository>:<tag>"
    - name: repo-url
      description: "The URL of the repo to be scanned"
    - name: scan-image
      description: Flag indicating that a scan should be performed with Trivy
      default: "false"
    - name: scan-repo
      description: Flag indicating that a scan should be performed for a git repo
      default: "false"
    - name: SKOPEO_IMAGE
      default: quay.io/containers/skopeo:v1.1.0
    - name: IMAGE_FROM_TLS_VERIFY
      default: "false"
    - name: TRIVY_IMAGE
      default: docker.io/aquasec/trivy
  volumes:
    - name: oci-image
      emptyDir: {}
  steps:
    - name: trivy-pull
      image: $(params.SKOPEO_IMAGE)
      volumeMounts:
        - mountPath: /var/oci
          name: oci-image
      script: |
        set -ex
        PERFORM_SCAN="$(params.scan-image)"
        if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
          echo "User selected to skip scanning. Skipping Trivy scan."
          exit 0
        fi
        IMAGE_FROM=$(params.image-url)
        REGISTRY_SERVER_FROM=$(echo "${IMAGE_FROM}" | awk -F / '{print $1}')
        IMAGE_TO="oci:/var/oci/image"
        IMAGE_FROM_TLS_VERIFY=$(params.IMAGE_FROM_TLS_VERIFY)
        echo "Tagging ${IMAGE_FROM} as ${IMAGE_TO}"
        echo "skopeo copy --src-creds=xxxx --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}"
        set +x
        skopeo copy ${IMAGE_FROM_CREDS} --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}
    - name: image-scan
      image: $(params.TRIVY_IMAGE)
      volumeMounts:
        - mountPath: /var/oci
          name: oci-image
      script: |
          set -ex
          PERFORM_SCAN="$(params.scan-image)"
          if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
            echo "User selected to skip scanning. Skipping Trivy scan."
            exit 0
          fi
          PATH_TO_IMAGE="/var/oci/image"
          echo -e "Trivy Security Scan image in registry"
          trivy image --exit-code 0 --input ${PATH_TO_IMAGE}
          trivy image --exit-code 1 --severity CRITICAL --input ${PATH_TO_IMAGE}
          my_exit_code=$?
          echo "Scan exit code :--- $my_exit_code"
          if [ ${my_exit_code} == 1 ]; then
              echo "Trivy scanning completed. CRITICAL Vulnerabilities found."
              exit 1
          else
            echo "Trivy scanning completed. CRITICAL vulnerabilities not found."
          fi
    - name: repo-scan
      image: $(params.TRIVY_IMAGE)
      script: |
          set -ex
          PERFORM_SCAN="$(params.scan-repo)"
          if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
            echo "User selected to skip scanning. Skipping Repository Scanning."
            exit 0
          fi
          REPO_URL=$(params.repo-url)
          echo -e "Trivy Scanning a git repository"
          trivy repo --input ${REPO_URL}
